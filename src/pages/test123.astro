---
/**
 * What should our generated list of pages look like?
 *
 * First up, what do we get from Astro?
 *
 * `getCollection` returns:
 * {
 *   id: '00-09-the/00-path/index.mdx' // file path
 *   slug: '00-09-the/00-path' // don't forget periods are stripped
 *   data: {
 *           // your frontmatter values are here
 *         }
 * }
 *
 * Let's just think about what we need for BackNext in the first instance.
 * It just wants an array of pages. We separate our areas with an `undefined`.
 *
 * [
 *   {
 *     pathname: '/../',
 *     title: 'This is what renders'
 *   }
 * ]
 */

import { getCollection } from "astro:content";

const sitePages = await getCollection("site");

interface BackNext {
  pathname?: string;
  title?: string;
}
const backNextArray: BackNext[] = [];

sitePages.forEach((page) => {
  // Are we in the same area? If *not*, drop in an `undefined`.

  // Type safety: does backNextArray[-1].pathname exist?
  if (backNextArray.length > 0) {
    if (
      backNextArray[backNextArray.length - 1].pathname?.substring(1, 6) !==
      page.slug.substring(0, 5) // no slashes on this one
    ) {
      backNextArray.push({ pathname: undefined });
    }
    // console.log(
    //   backNextArray[backNextArray.length - 1].pathname?.substring(1, 6)
    // );
    // console.log(page.slug.substring(0, 5));
  }

  backNextArray.push({
    pathname: "/" + page.slug.replace(/(\d\d)(\d\d)/, "$1.$2") + "/",
    title: page.data.title,
  });
});

console.log("ðŸ†š test123.astro/backNextArray:", backNextArray);

// Insert
---

<h1>Test123</h1>

<p>This page doesn't need to render nicely.</p>
