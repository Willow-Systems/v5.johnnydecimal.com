---
import Layout from "@layouts/Layout.astro";

import JDBlock from "@components/JDBlock/JDBlock.astro";
---

<!-- 
Two main things to figure out.

1. The overall styling of the box. Because the point is that this will be consistent no matter the input you feed it.

2. The processing of the input. Because you need to be able to throw this thing anything and for it to handle it. This is your go-to component, the one and only, the thing that all boxes render their stuff in. *Other than first-few-pages exceptions.

But here, in this pen, don't worry about that processing part. Just assume that your processor works. What you do need to figure out is the structure and which classes your processor will create.

## Hanging indents

In the ASCII tree example, it'd be nice to be able to specify a hanging indent. Don't forget that you'll need to somehow feed this to the processor otherwise how would it know.

## So, for each line

### ACID

It can be an ACID, in which case we format it like one.

By default this means:

10-19 Area (b)
   11 Category (t:u)
      11.01 ID

And on mobile:

10-19 Area (b)
   11 Category (t:u)
   11.01 ID

Now, how to handle PRO.AC.ID?

Let's say we want to show:

P01 Johnny.Decimal (b, u)
    10-19 Area (b)
       11 Category (t:u)
          11.01 ID

The basic structure of JD there is the same, they're all just indented by some amount. Could that be an option you could pass?

-->
<Layout title="test page">
  <JDBlock
    text={`
10-19 Area is a very long area name that will undoubtedly flow on to the next line
   11 Category almost certainly won't ever be this long but let's check
   11.01 ID can plausibly be longer but still, this is extreme
`}
  />

  <JDBlock
    text={`
.
├─ _00 templates and important files
├─ 00 Important
├─ 01 Jim's temporary folder DO NOT MOVE
├─ Accounts
├─ Accounting
├─ Expenses
├─ Finance
├─ FINANCE 2023
├─ Group files
├─ H drive backups for Finance team
└─ Last year's accounts Jim copy of copy (2)
`}
    options={{ classListForEveryLine: "hanging-3ch" }}
  />

  <svg
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    version="1.1"
    x="0px"
    y="0px"
    style="enable-background:new 0 0 1080 1080;"
    xml:space="preserve"
    viewBox="183.7 269.9 712.55 540.3"
    height="300"
  >
    <g id="Layer_1"> </g>
    <g id="Layer_2">
      <path
        class="st0"
        d="M473.2,269.9H350.6c-6.4,0-12.1,4.2-13.9,10.4L184.3,791.9c-2.7,9.1,4.1,18.3,13.7,18.3h122.7   c6.4,0,12.1-4.2,13.9-10.4l152.3-511.7C489.6,279,482.8,269.9,473.2,269.9z"
      ></path>
      <g>
        <path
          class="st2"
          d="M834.9,459.2H712.1c-9.5,0-16.3-9-13.7-18.1l46.9-160.7c1.8-6.2,7.5-10.5,14-10.5H882c9.5,0,16.3,9,13.7,18.1    l-46.9,160.7C847,454.9,841.3,459.2,834.9,459.2z"
        ></path>
        <path
          class="st2"
          d="M593,791.8l86-283.9c1.8-6.1,7.5-10.3,13.9-10.3h122.6c9.6,0,16.4,9.1,13.6,18.3l-86,283.9    c-1.8,6.1-7.5,10.3-13.9,10.3H606.7C597.1,810.1,590.3,801,593,791.8z"
        ></path>
      </g>
      <g>
        <g>
          <path
            class="st1"
            d="M449.5,620.8h122.7c9.5,0,16.3,9,13.7,18.1L539,799.7c-1.8,6.2-7.5,10.5-14,10.5H402.3     c-9.5,0-16.3-9-13.7-18.1l46.9-160.7C437.3,625.1,443,620.8,449.5,620.8z"
          ></path>
          <path
            class="st1"
            d="M691.3,288.2l-86,283.9c-1.8,6.1-7.5,10.3-13.9,10.3H468.8c-9.6,0-16.4-9.1-13.6-18.3l86-283.9     c1.8-6.1,7.5-10.3,13.9-10.3h122.6C687.2,269.9,694.1,279,691.3,288.2z"
          ></path>
        </g>
      </g>
    </g>
  </svg>
</Layout>

<style lang="scss">
  @use "/src/styles/johnny" as *;
  svg {
    align-self: center;
    justify-self: start;

    .st0 {
      fill: #a8001f;
      fill: $colour-700;
    }
    .st1 {
      fill: #dd0031;
      fill: $colour-600;
    }
    .st2 {
      fill: #ff004d;
      fill: $colour-500;
    }
    .st3 {
      fill: #ffffff;
    }
  }
</style>
