---
/**
 * `JDNavigation` calls this component iteratively:
 * - For each page on the site, as `JDNavigation` generates that page,
 *   - it calls `JDNavItem` multiple times by mapping over an array
 *     of page objects,
 *   - which have already been sorted so they're in JD-order
 *     - e.g. 10-19 > 10 > 10.00 > 10.01 > 11 > 20-29 > 20 > 20.00
 *   - because it puts the rendered result of this component in to an
 *     <ol>,
 *   - which is why everything we return here is wrapped in a <li>.
 *
 * In this way it builds up the navigation bar for each page that it renders.
 *
 * This component has to figure out what it's rendering and where it 'fits'
 * in the navigation scheme. This is because we render the ASCII-line-art
 * parts here, and they vary depending on what we're rendering.
 *
 * The following terms are used on this page. It took me ages to wrap my head
 * around how this worked, and they helped.
 * - creatingNavForThisPage: the page we're creating the NavItem for. So if
 *   Astro is generating *the page* `/00-09-site-administration`, that's this.
 * - navItemBeingGenerated: the particular link that is being generated. So
 *   if Astro is generating *the link to* `/00-09-site-administration`,
 *   that's this value.
 */

// TODO: document the Excel file as ASCII here

/**
 * So, which page are we generating this item for? We get this by calling
 * Astro's API.
 */
const creatingNavForThisPage: string[] = Astro.url.pathname.split("/");
/**
 * Astro.url.pathname has a leading '/', so the first element of the array we
 * just created is always blank. Remove it.
 *
 * We've also set `trailingSlash: true` so the last element is also blank.
 */
creatingNavForThisPage.shift();
creatingNavForThisPage.pop();
/**
 * Now we have an array:
 * [0]: the area slug: `00-09-site-administration`
 * [1]? the category slug: `01-about`
 * [2]? the id slug: `01.01-colophon`
 */

/**
 * TODO check this one when the home route is working
 * Special case: if we're creating `/`, we're on the home page. Pretend it's
 * 11.01 Home page.
 */
if (creatingNavForThisPage.length === 0) {
  creatingNavForThisPage.push("10-19-concepts");
  creatingNavForThisPage.push("11-core");
  creatingNavForThisPage.push("11.01-introduction");
}

/**
 * The length of creatingNavForThisPage tells us what *type* of page we're
 * creating for.
 *
 * Crazy type signature thanks to ChatGPT; it fixes an error when we try to
 * look up the value.
 */
const pageTypeLookup: { [key: string]: string; [index: number]: string } = {
  1: "area",
  2: "category",
  3: "id",
};

/**
 * `creatingNavForThisPage.length` must be 1, 2, or 3.
 */
if (creatingNavForThisPage.length < 1 || creatingNavForThisPage.length > 3) {
  throw new Error(
    `🆘 JDNavItem.astro/checking for length of creatingNavForThisPage failed: must be 1, 2, or 3: is ${creatingNavForThisPage.length}`
  );
}

const creatingThisTypeOfPage: string =
  pageTypeLookup[creatingNavForThisPage.length];
console.log(
  "🆚 JDNavItem.astro/creatingThisTypeOfPage:",
  creatingThisTypeOfPage
);

/**
 * ============================================================================
 *
 * ============================================================================
 */

/**
 * Each time this component is called it's passed these properties. They're
 * generated by JDNavigation and are a list of all site pages, sorted by JD.
 */
interface Props {
  number: string; // For display
  title: string; // For display
  slug: string; // Comes in as a simple string
}
const { number, title, slug } = Astro.props;
console.log("🆚 JDNavItem.astro/number, title, slug:", number, title, slug);

/**
 * Manipulate the slug (of the page we're going to link to).
 *
 * It comes in without a leading but with a trailing slash, which we pop off.
 */
const navItemBeingGenerated: string[] = slug.split("/");
navItemBeingGenerated.pop();
/**
 * Now we have an array:
 * [0]: the area slug: `00-09-site-administration`
 * [1]? the category slug: `01-about`
 * [2]? the id slug: `01.01-colophon`
 */

/**
 * `navItemBeingGenerated.length` must be 1, 2, or 3.
 */
if (navItemBeingGenerated.length < 1 || navItemBeingGenerated.length > 3) {
  throw new Error(
    `🆘 JDNavItem.astro/checking for length of navItemBeingGenerated failed: must be 1, 2, or 3: is ${creatingNavForThisPage.length}`
  );
}

const navItemType: string = pageTypeLookup[navItemBeingGenerated.length];
console.log("🆚 JDNavItem.astro/navItemType :", navItemType);

/**
 * ============================================================================
 */
const isThisNavItemInScopeOfThePageWeAreCreating = (): boolean => {
  /**
   * Ref. Excel: if navItemBeingGenerated is an area, it's in scope as long as the areas 
     are the same.
   */
  if (navItemType === "area") {
    return creatingNavForThisPage[0] === navItemBeingGenerated[0];
  }

  /**
   * If we're creating a wyab item for a category...
   */
  if (navItemType === "category") {
    /* If creatingWyabFor{Area}, a category can't be in scope. */
    if (creatingThisTypeOfPage === "area") {
      return false;
    }
    /**
     * Otherwise the rules are the same: the category number for the page we're
     * creating needs to be >= the category number of the wyab item, AND
     * they need to be in the same area.
     *
     * - Creating page 16, wyab is for 14. 16 >= 14 AND in same area, pass.
     * - Creating page 12.11, wyab is for 14. 12 !>= 14, fail.
     */

    /* Test for area first. */
    if (creatingNavForThisPage[0] !== navItemBeingGenerated[0]) {
      return false;
    }

    /**
     * The category number for the page we're creating needs to be >= the
     * category number of the wyab item. We've just ruled out areas not
     * matching, so at this point all navItemBeingGenerated have a category at [1].
     */
    return creatingNavForThisPage[1] >= navItemBeingGenerated[1];
  }

  /**
   * By now we must be creating a wyab item for an ID...
   */
  if (navItemType === "id") {
    /* As above, creating for an area page is an easy fail. */
    if (creatingThisTypeOfPage === "area") {
      return false;
    }
  }

  /**
   * And again, the areas must match no matter what.
   */
  if (creatingNavForThisPage[0] !== navItemBeingGenerated[0]) {
    return false;
  }

  /**
   * If we're creating a category page, an ID wyab is in scope if the category
   * number for the page is > the wyab item.
   */
  if (creatingThisTypeOfPage === "category") {
    return creatingNavForThisPage[1] > navItemBeingGenerated[1];
  }

  /**
   * And finally if we're creating an ID page, an ID wyab is in scope if the
   * ID number of the page we're creating is >= the ID number of the wyab item.
   */
  if (creatingThisTypeOfPage === "id") {
    return creatingNavForThisPage[2] >= navItemBeingGenerated[2];
  }

  /**
   * We shouldn't be able to get here.
   */
  console.log("");
  console.log("‼️‼️‼️‼️ JDNavItem.astro is broken.");
  console.log(
    "🆚 JDNavItem.astro/navItemBeingGenerated:",
    navItemBeingGenerated
  );
  console.log(
    "🆚 JDNavItem.astro/creatingNavForThisPage:",
    creatingNavForThisPage
  );
  console.log(
    "🆚 JDNavItem.astro/creatingThisTypeOfPage:",
    creatingThisTypeOfPage
  );
  throw new Error("JDNavItem.astro: can't get there from here.");
};

const isInScope = isThisNavItemInScopeOfThePageWeAreCreating();

/**
 * # Is the item the page we're on, i.e. the active item?
 *
 * We draw different wyab if the item is the currently active item.
 * This should be easier: do the two URLs match?
 */

const isThisNavItemAlsoThePageWeAreCreating = (): boolean => {
  return (
    JSON.stringify(creatingNavForThisPage) ===
    JSON.stringify(navItemBeingGenerated)
  );
};

const isActiveItem = isThisNavItemAlsoThePageWeAreCreating();

/**
 * Is this item a direct parent of the page we're on?
 *
 * So 10-19 and 11 are direct parents of 11.02, and so is 11.01 so that we
 * match criteria P10. But 10.01 isn't, it's just an ancestor.
 */

const isThisNavItemTheParentOfThePageWeAreCreating = () => {
  /**
   * If we're generating a page for an area, an area wyab isn't its own parent.
   */
  if (creatingThisTypeOfPage === "area") {
    return false;
  }

  /**
   * If we're generating a page for a category, only its area is its parent.
   */
  if (creatingThisTypeOfPage === "category") {
    if (navItemType === "area") {
      return creatingNavForThisPage[0] === navItemBeingGenerated[0];
    }
  }

  /**
   * And if we're generating a page for an ID, its category and its area are
   * its parent, as is any ID in the same category that's above it (P10). So
   * it's like an older sister vs. a parent, but whatever.
   */
  if (creatingThisTypeOfPage === "id") {
    if (navItemType === "category") {
      return creatingNavForThisPage[1] === navItemBeingGenerated[1];
    }
    if (navItemType === "area") {
      return creatingNavForThisPage[0] === navItemBeingGenerated[0];
    }
    if (navItemType === "id") {
      return (
        creatingNavForThisPage[1] === navItemBeingGenerated[1] &&
        creatingNavForThisPage[2].substring(3, 5) >
          navItemBeingGenerated[2].substring(3, 5)
      );
    }
  }
};

const isParentItem = isThisNavItemTheParentOfThePageWeAreCreating();

// TODO: we're creating a link for the page we're on. No need.
---

<li>
  {
    // P1
    navItemType === "area" && !isInScope && (
      <>
        <a class="area area-notInScope-P1-grid" href={slug}>
          <div class="area-number">{number}</div>
          <div />
          <div class="area-title">{title}</div>
        </a>
      </>
    )
  }

  {
    // P3
    navItemType === "category" && !isInScope && (
      <a class="category category-notInScope-P3-grid" href={slug}>
        <div />
        <div>{number}</div>
        <div />
        <div>{title}</div>
      </a>
    )
  }

  {
    // P4
    navItemType === "id" && !isInScope && (
      <a class="id id-notInScope-P4-grid" href={slug}>
        <div />
        <div>{number}</div>
        <div />
        <div>{title}</div>
      </a>
    )
  }

  {
    // P2
    navItemType === "area" && isInScope && isActiveItem && (
      <>
        <a class="area area-inScope-active-P2-grid" href={slug}>
          <div>{number}</div>
          <div />
          <div>{title}</div>
        </a>
      </>
    )
  }

  {
    // P5
    navItemType === "area" && isInScope && !isActiveItem && (
      <>
        <a class="area area-inScope-notActive-P5-grid" href={slug}>
          <div class="area-inScope-notActive-P5-number">
            {number}
            <br />
            &#x2502;
            <br />
            &#x2502;
            <br />
            &#x2502;
            <br />
            &#x2502;
          </div>
          <div />
          <div>{title}</div>
        </a>
      </>
    )
  }

  {
    // P6
    navItemType === "category" &&
      isInScope &&
      !isActiveItem &&
      !isParentItem && (
        <a
          class="category category-inScope-notActive-notParent-P6-grid"
          href={slug}
        >
          <div class="category-inScope-notActive-notParent-P6-lines">
            &#x2502;
            <br />
            &#x2502;
            <br />
            &#x2502;
            <br />
            &#x2502;
          </div>
          <div />
          <div>{number}</div>
          <div />
          <div>{title}</div>
        </a>
      )
  }

  {
    // P7
    navItemType === "id" && isInScope && !isActiveItem && !isParentItem && (
      <a class="id id-inScope-notActive-notParent-P7-grid" href={slug}>
        <div class="id-inScope-notActive-notParent-P7-lines">
          &#x2502;
          <br />
          &#x2502;
          <br />
          &#x2502;
          <br />
          &#x2502;
        </div>
        <div />
        <div>{number}</div>
        <div />
        <div>{title}</div>
      </a>
    )
  }

  {
    // P8
    navItemType === "category" && isInScope && isActiveItem && (
      <a class="category category-inScope-active-P8-grid" href={slug}>
        <div class="category-inScope-active-P8-lines">
          &#x2514;&#x2524;
          <br />
          &nbsp;&#x2502;
          <br />
          &nbsp;&#x2502;
          <br />
          &nbsp;&#x2502;
        </div>
        <div />
        <div>{number}</div>
        <div />
        <div>{title}</div>
      </a>
    )
  }
  {
    // P8
    navItemType === "category" &&
      isInScope &&
      !isActiveItem &&
      isParentItem && (
        <a class="category category-inScope-active-P8-grid" href={slug}>
          <div class="category-inScope-active-P8-lines">
            &#x2514;&#x2524;
            <br />
            &nbsp;&#x2502;
            <br />
            &nbsp;&#x2502;
            <br />
            &nbsp;&#x2502;
          </div>
          <div />
          <div>{number}</div>
          <div />
          <div>{title}</div>
        </a>
      )
  }

  {
    // P10
    navItemType === "id" && isInScope && !isActiveItem && isParentItem && (
      <a class="id id-inScope-notActive-isParent-P10-grid" href={slug}>
        <div />
        <div class="id-inScope-notActive-isParent-P10-lines">
          &#x2502;
          <br />
          &#x2502;
          <br />
          &#x2502;
          <br />
          &#x2502;
          <br />
          &#x2502;
          <br />
        </div>
        <div />
        <div>{number}</div>
        <div />
        <div>{title}</div>
      </a>
    )
  }

  {
    // P11
    navItemType === "id" && isInScope && isActiveItem && (
      <a class="id id-inScope-active-P11-grid" href={slug}>
        <div />
        <div class="id-inScope-active-P11-lines">
          &#x2514;&#x2500;&#x2500;&#x2524;
          <br />
          &nbsp;&nbsp;&nbsp;&#x2502;
          <br />
          &nbsp;&nbsp;&nbsp;&#x2502;
          <br />
          &nbsp;&nbsp;&nbsp;&#x2502;
          <br />
          &nbsp;&nbsp;&nbsp;&#x2502;
          <br />
        </div>
        <div />
        <div>{number}</div>
        <div />
        <div>{title}</div>
      </a>
    )
  }
</li>

<style lang="scss">
  @use "/src/styles/johnny" as *;

  .active {
    color: $colour-500;
  }

  a:hover,
  a:focus {
    /* outline: 1px solid $colour-500; */
    /* border-left: 2px solid $colour-500; */
    /* margin-left: -2px; */
    background-color: $colour-500;
    color: $colour-100;
  }

  a:hover div {
    background-color: $colour-500;
    color: $colour-100;
  }

  /* a:visited:hover div {
    background-color: rgb(52, 82, 4);
    color: $colour-100;;;
  } */

  /* a {
    border-left: 2px solid transparent;
    padding-left: 2px;
    margin-left: -2px;
  } */

  /* li {
    list-style: none;
  } */

  li > .area {
    margin-top: 1rem;
  }

  li > .category > div:last-child {
    text-decoration: underline;
  }

  li:has(a.area) {
    font-weight: bold;
  }

  li:has(a.area):first-child {
    border-top: 0;
  }

  li:first-child > a {
    margin-top: 0;
  }

  li a {
    color: $colour-700;
  }

  .area-notInScope-P1-grid {
    display: grid;
    /* Numbers, gap, title */
    grid-template-columns: 5ch 1ch auto;
  }

  .category-notInScope-P3-grid {
    display: grid;
    /* Gap, numbers, gap, title */
    grid-template-columns: 3ch 2ch 1ch auto;
  }

  .id-notInScope-P4-grid {
    display: grid;
    /* Gap, numbers, gap, title */
    grid-template-columns: 6ch 5ch 1ch auto;
  }

  .area-inScope-active-P2-grid {
    display: grid;
    /* Numbers, gap, title */
    grid-template-columns: 5ch 1ch auto;
    color: $colour-500;
  }

  .area-inScope-notActive-P5-grid {
    display: grid;
    /* Numbers, gap, title */
    grid-template-columns: 5ch 1ch auto;
    color: $colour-500;
  }

  .area-inScope-notActive-P5-number {
    height: 0;
    min-height: 100%;
    overflow: hidden;
  }

  .category-inScope-notActive-notParent-P6-grid {
    display: grid;
    /* Lines, gap, numbers, gap, title */
    grid-template-columns: 1ch 2ch 2ch 1ch auto;
  }

  .category-inScope-notActive-notParent-P6-lines {
    height: 0;
    min-height: 100%;
    overflow: hidden;
    color: $colour-500;
  }

  .id-inScope-notActive-notParent-P7-grid {
    display: grid;
    /* Lines, gap, numbers, gap, title */
    grid-template-columns: 1ch 5ch 5ch 1ch auto;
  }

  .id-inScope-notActive-notParent-P7-lines {
    height: 0;
    min-height: 100%;
    overflow: hidden;
    color: $colour-500;
  }

  .category-inScope-active-P8-grid {
    display: grid;
    /* Lines, gap, numbers, gap, title */
    grid-template-columns: 2ch 1ch 2ch 1ch auto;
    color: $colour-500;

    & div:last-child {
      text-decoration: underline;
    }
  }

  .category-inScope-active-P8-lines {
    height: 0;
    min-height: 100%;
    overflow: hidden;
  }

  .id-inScope-notActive-isParent-P10-grid {
    display: grid;
    /* Gap, lines, gap, number, gap, title */
    grid-template-columns: 1ch 1ch 4ch 5ch 1ch auto;
  }

  .id-inScope-notActive-isParent-P10-lines {
    height: 0;
    min-height: 100%;
    overflow: hidden;
  }
  .id-inScope-notActive-isParent-P10-grid {
    display: grid;
    /* Gap, lines, gap, number, gap, title */
    grid-template-columns: 1ch 1ch 4ch 5ch 1ch auto;
  }

  .id-inScope-notActive-isParent-P10-lines {
    height: 0;
    min-height: 100%;
    overflow: hidden;
    color: $colour-500;
  }

  .id-inScope-active-P11-grid {
    display: grid;
    /* Gap, lines, gap, number, gap, title */
    grid-template-columns: 1ch 4ch 1ch 5ch 1ch auto;
    color: $colour-500;
    font-weight: bold;
    background-color: $colour-500;
    color: $colour-50;

    // outline: 1px solid $colour-500;

    // background-color: $colour-100;
    // border-right: 2px solid $colour-500;
    // border-left: 2px solid $colour-500;
    // margin-left: -2px;
  }

  .id-inScope-active-P11-lines {
    height: 0;
    min-height: 100%;
    overflow: hidden;
  }
</style>
