---
import type { Options } from "./jdBlockFunctions";

/**
 * `text`: the text to render. Will be split in to an array of strings.
 * `classArray`: an array of strings. [0] for the first line, [n] for the last.
 * `options`: TBC.
 */
interface Props {
  text: string;
  classArray?: Array<string>;
  options?: Options;
}
const { text, classArray = [], options } = Astro.props;

import { processJDBlock } from "./jdBlockFunctions";
const arrayToRender = processJDBlock(text, classArray, options);
---

<div class="JDBlock">
  {
    arrayToRender.map((line) => {
      return <pre class:list={line.classes} set:html={line.text} />;
    })
  }
</div>

<style lang="scss" is:global>
  // Global required as we're mapping in lines from an array.
  @use "/src/styles/johnny" as *;

  .JDBlock {
    // @include troubleshooting;
    box-shadow: $box-shadow;
    border: 2px solid $colour-500;
    border-radius: 2px;
    color: $colour-800;
    line-height: 1.4;
    padding: 1.5rem 2rem;
    width: fit-content;
    max-width: 450px;

    // background-color: $colour-700;
    // border: 2px solid $colour-300;
    // border-radius: 2px;
    // box-shadow: $box-shadow;
    // color: $colour-100;
    font-size: 1.3rem;
    margin: $large 0;
    // padding: $small;
    // width: fit-content;

    @include for-tablet-portrait-up {
      font-size: 1.6rem;
      margin: $xl 0;
      padding: $small $medium;
    }

    pre {
      font-family: $monospace;
      margin: 0;
      // padding-inline: 4px;
      white-space: pre-wrap;

      &.area {
        grid-template-columns: 6ch auto;
        display: grid;
        font-weight: bold;

        &:not(:first-child) {
          margin-top: 1.6rem;
        }
      }

      &.bold {
        font-weight: bold;
      }

      &.category {
        display: grid;
        grid-template-columns: 3ch auto;
        text-decoration: underline;

        & .category-title {
        }
      }

      &.fade {
        color: $colour-200;
      }

      &.hanging-3ch {
        padding-left: 3ch;
        text-indent: -3ch;
      }

      &.highlight {
        background-color: $highlight-300;
        border-radius: 2px;
      }

      &.highlight-underline {
        border-bottom: 2px solid $highlight-600;
      }

      &.id {
        display: grid;
        grid-template-columns: 3ch 6ch auto;
        grid-template-columns: 6ch 6ch auto;

        @include for-tablet-portrait-up() {
          grid-template-columns: 6ch 6ch auto;
        }
      }

      &.mimic-id {
        padding-left: 3ch;
        @include for-tablet-portrait-up {
          padding-left: 6ch;
        }
      }

      &.mimic-folder-content {
        padding-left: 9ch;
        @include for-tablet-portrait-up {
          padding-left: 12ch;
        }
      }

      // Favour mimic-x
      // &.padding-l-6 {
      //   padding-left: 6ch;
      // }
      // &.padding-l-12 {
      //   padding-left: 12ch;
      // }

      &.space {
        min-height: 1.5rem;
      }

      &.strikethrough {
        color: $highlight-600;
        text-decoration: line-through;
        text-decoration-color: $highlight-600;
      }
    }
  }
</style>
